/*
Tudo que instalamos com o npm √© teoricamente
Javascript. Ent√£o, como funcionam as depend√™ncias?

Na axios por exemplo, vamos instalar com:
    npm i axios
Que ja conhecemos bem, √© um pacote para fazer 
requisi√ß√µes HTTP.
*/
import axios from "axios";
axios.get("/PastinhaShow", {});
/*
Importando essa biblioteca, notamos que a Axios
j√° tem a tipagem funcionando por padr√£o. Ok, mas
e quando alguma biblioteca n√£o? :/ Nesse caso, usamos o comando:
    npm i @types/nomeBiblioteca -D

Vamos usar como exemplo a biblioteca "simplebar"
com o comando:
    npm i simplebar

A qual essa biblioteca, pega a barra de rolagem de algum elemento
HTML, e aplica um efeito via Js.
*/

//Letra mai√∫scula pq √© uma classe:
import Simplebar from "simplebar";
/*
Nesse caso, vemos que d√° erro, pois ela foi feita
apenas para Js. Nesse caso, usamos o comando:
    npm i @types/simplebar -D
*/
const content = document.querySelector("#content") as HTMLElement;

const simplebar = new Simplebar(content, { autoHide: false });
/*Sendo assim conseguimos utilizar a depend√™ncia, 
mesmo sendo suportada apenas pra Js. E essa "m√°gica",
se d√° pelo fato que o Ts √© convertido para Js quando
executado/debugado üòé*/

/*
AGORA, SE A BIBLIOTECA N√ÉO POSSUI UM PACOTE DE TIPOS, N√ÉO PODEMOS
INSTALAR ELA COM O COMANDO: npm i @types/nomeBiblioteca -D
---------------------------NESSE CASO:---------------------------
Criamos uma vari√°vel const de nome x, que requer a biblioteca sem
pacote de tipos. Assim:
    const bibSemTipo = require("nomeBiblioteca")

Se o require der erro, instalamos o "npm i @types/node -D" (sem aspas)
porque ele n√£o vai estar instalado.

--------------------AGORA, SE MESMO ASSIM DER ERRO:--------------
MDS ASSUAHSA, TU QUER MESMO USAR ESSE BIBLIOTECA HEIN?)

Criamos um arquivo "global.d.ts" na pasta "src", tendo esse arquivo, o seguinte conte√∫do:
    declare module "nomeBiblioteca"

Declarando ent√£o, que isso √© um m√≥dulo Js. E todo m√≥dulo Js no Ts, √© definido como "any"
(Sem tipo/Tipagem autom√°tica/Tipagem din√¢mica).

Usando depois, nosso modulo da biblioteca, com o import:
    import bibSemTipo from "nomeBiblioteca"
*/
