console.log("Hello World :D");

//Tentando importar o arquivo .js:
import { sum } from "./calculator.js";
/*
Se deu certo, e n√£o erro nesse arquivo,
o "allowJs" do tsconfig.json,est√° descomentado 
e definido como "true". üòâ
*/

console.log(sum(5, 5));
/*
Por√©m, como o calculator √© do tipo .js,
a fun√ß√£o "sum" tem suas vars como padr√£o
do tipo "any". Por causa da tipagem din√¢mica.

Oq significa que, se colocarmos os n√∫meros com ""
(duas strings), a fun√ß√£o ir√° CONCATEN√Å-LOS,
inv√©s de realmente somar. Veja:
*/
console.log(sum("5", "5"));
/*
Para impedir isso, n√£o tem jeito, ou declaramos as
vars no pr√≥prio arquivo Js, ou transformamos ele pra
Ts (apenas mudando sua extens√£o (.js pra .ts)), mas tamb√©m
declarando todas as vari√°veis. Para evitar esses erros.
*/

//--------------------Usado no ./controllers:--------------------
import users from "@/controllers/http/Users";

users();
/*
Se der erro, √© por que o Ts n√£o est√° sendo usado
como ambiente de dev, l√° no package.json. Nesse caso:
    npm i tsconfig-paths -D

E adicionando tamb√©m, no "dev" do package.json, entre
o primeiro e segundo comando:
    -r tsconfig-paths/register

E ele vai funcionar üòäüòé, exibindo a fun√ß√£o users(), no
console.log.
*/

//------Utilizado no ./Utilidades&Extras/Decorators.txt-----------
//Importamos nosso decorator:
import { setApiVersion } from "@/Utilidades&Extras/Decorators";

//Para usar o decorador (n√£o precisamos colocar ";"):
@setApiVersion("A vers√£o da api √©: 1.0 ü§©üòé")
class API {}

//Mostra no console.log uma nova classe API:
console.log(new API());
